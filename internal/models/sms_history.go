// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SmsHistory sms history
//
// swagger:model SmsHistory
type SmsHistory []*SmsHistoryItems0

// Validate validates this sms history
func (m SmsHistory) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this sms history based on the context it is used
func (m SmsHistory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// SmsHistoryItems0 sms history items0
//
// swagger:model SmsHistoryItems0
type SmsHistoryItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// phone number
	PhoneNumber string `json:"phone_number,omitempty"`

	// request
	Request *SmsHistoryItems0Request `json:"request,omitempty"`

	// responses
	Responses *SmsHistoryItems0Responses `json:"responses,omitempty"`
}

// Validate validates this sms history items0
func (m *SmsHistoryItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmsHistoryItems0) validateRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.Request) { // not required
		return nil
	}

	if m.Request != nil {
		if err := m.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

func (m *SmsHistoryItems0) validateResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.Responses) { // not required
		return nil
	}

	if m.Responses != nil {
		if err := m.Responses.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sms history items0 based on the context it is used
func (m *SmsHistoryItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmsHistoryItems0) contextValidateRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.Request != nil {
		if err := m.Request.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request")
			}
			return err
		}
	}

	return nil
}

func (m *SmsHistoryItems0) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	if m.Responses != nil {
		if err := m.Responses.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responses")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responses")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmsHistoryItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmsHistoryItems0) UnmarshalBinary(b []byte) error {
	var res SmsHistoryItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SmsHistoryItems0Request sms history items0 request
//
// swagger:model SmsHistoryItems0Request
type SmsHistoryItems0Request struct {

	// sender
	Sender string `json:"sender,omitempty"`

	// type messege
	TypeMessege string `json:"type_messege,omitempty"`
}

// Validate validates this sms history items0 request
func (m *SmsHistoryItems0Request) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sms history items0 request based on context it is used
func (m *SmsHistoryItems0Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SmsHistoryItems0Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmsHistoryItems0Request) UnmarshalBinary(b []byte) error {
	var res SmsHistoryItems0Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SmsHistoryItems0Responses sms history items0 responses
//
// swagger:model SmsHistoryItems0Responses
type SmsHistoryItems0Responses struct {

	// status
	// Example: Success
	Status string `json:"status,omitempty"`
}

// Validate validates this sms history items0 responses
func (m *SmsHistoryItems0Responses) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sms history items0 responses based on context it is used
func (m *SmsHistoryItems0Responses) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SmsHistoryItems0Responses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmsHistoryItems0Responses) UnmarshalBinary(b []byte) error {
	var res SmsHistoryItems0Responses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
