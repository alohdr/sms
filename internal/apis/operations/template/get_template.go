// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"hanoman-id/xendit-payment/internal/models"
)

// GetTemplateHandlerFunc turns a function with the right signature into a get template handler
type GetTemplateHandlerFunc func(GetTemplateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTemplateHandlerFunc) Handle(params GetTemplateParams) middleware.Responder {
	return fn(params)
}

// GetTemplateHandler interface for that can handle valid get template params
type GetTemplateHandler interface {
	Handle(GetTemplateParams) middleware.Responder
}

// NewGetTemplate creates a new http.Handler for the get template operation
func NewGetTemplate(ctx *middleware.Context, handler GetTemplateHandler) *GetTemplate {
	return &GetTemplate{Context: ctx, Handler: handler}
}

/* GetTemplate swagger:route GET /template Template getTemplate

Health check

Health check endpoint

*/
type GetTemplate struct {
	Context *middleware.Context
	Handler GetTemplateHandler
}

func (o *GetTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTemplateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTemplateOKBody get template o k body
//
// swagger:model GetTemplateOKBody
type GetTemplateOKBody struct {

	// response code
	ResponseCode string `json:"response_code,omitempty"`

	// response data
	ResponseData models.GetTemplate `json:"response_data"`

	// response messege
	ResponseMessege string `json:"response_messege,omitempty"`
}

// Validate validates this get template o k body
func (o *GetTemplateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponseData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTemplateOKBody) validateResponseData(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseData) { // not required
		return nil
	}

	if err := o.ResponseData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getTemplateOK" + "." + "response_data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getTemplateOK" + "." + "response_data")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get template o k body based on the context it is used
func (o *GetTemplateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponseData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTemplateOKBody) contextValidateResponseData(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ResponseData.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getTemplateOK" + "." + "response_data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getTemplateOK" + "." + "response_data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTemplateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTemplateOKBody) UnmarshalBinary(b []byte) error {
	var res GetTemplateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
