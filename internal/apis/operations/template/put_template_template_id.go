// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutTemplateTemplateIDHandlerFunc turns a function with the right signature into a put template template ID handler
type PutTemplateTemplateIDHandlerFunc func(PutTemplateTemplateIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTemplateTemplateIDHandlerFunc) Handle(params PutTemplateTemplateIDParams) middleware.Responder {
	return fn(params)
}

// PutTemplateTemplateIDHandler interface for that can handle valid put template template ID params
type PutTemplateTemplateIDHandler interface {
	Handle(PutTemplateTemplateIDParams) middleware.Responder
}

// NewPutTemplateTemplateID creates a new http.Handler for the put template template ID operation
func NewPutTemplateTemplateID(ctx *middleware.Context, handler PutTemplateTemplateIDHandler) *PutTemplateTemplateID {
	return &PutTemplateTemplateID{Context: ctx, Handler: handler}
}

/* PutTemplateTemplateID swagger:route PUT /template/{template_id} Template putTemplateTemplateId

Health check

Health check endpoint

*/
type PutTemplateTemplateID struct {
	Context *middleware.Context
	Handler PutTemplateTemplateIDHandler
}

func (o *PutTemplateTemplateID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutTemplateTemplateIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutTemplateTemplateIDOKBody put template template ID o k body
//
// swagger:model PutTemplateTemplateIDOKBody
type PutTemplateTemplateIDOKBody struct {

	// response code
	ResponseCode string `json:"response_code,omitempty"`

	// response data
	ResponseData string `json:"response_data,omitempty"`

	// response messege
	ResponseMessege string `json:"response_messege,omitempty"`
}

// Validate validates this put template template ID o k body
func (o *PutTemplateTemplateIDOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put template template ID o k body based on context it is used
func (o *PutTemplateTemplateIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutTemplateTemplateIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTemplateTemplateIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutTemplateTemplateIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
