// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetRedirectHandlerFunc turns a function with the right signature into a get redirect handler
type GetRedirectHandlerFunc func(GetRedirectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRedirectHandlerFunc) Handle(params GetRedirectParams) middleware.Responder {
	return fn(params)
}

// GetRedirectHandler interface for that can handle valid get redirect params
type GetRedirectHandler interface {
	Handle(GetRedirectParams) middleware.Responder
}

// NewGetRedirect creates a new http.Handler for the get redirect operation
func NewGetRedirect(ctx *middleware.Context, handler GetRedirectHandler) *GetRedirect {
	return &GetRedirect{Context: ctx, Handler: handler}
}

/* GetRedirect swagger:route GET /redirect Health getRedirect

Health check

Health check endpoint

*/
type GetRedirect struct {
	Context *middleware.Context
	Handler GetRedirectHandler
}

func (o *GetRedirect) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetRedirectParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRedirectOKBody get redirect o k body
//
// swagger:model GetRedirectOKBody
type GetRedirectOKBody struct {

	// success retrieve data
	// Example: app running well
	AccessToken string `json:"access_token,omitempty"`
}

// Validate validates this get redirect o k body
func (o *GetRedirectOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get redirect o k body based on context it is used
func (o *GetRedirectOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRedirectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRedirectOKBody) UnmarshalBinary(b []byte) error {
	var res GetRedirectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
