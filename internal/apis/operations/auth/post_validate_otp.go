// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostValidateOtpHandlerFunc turns a function with the right signature into a post validate otp handler
type PostValidateOtpHandlerFunc func(PostValidateOtpParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostValidateOtpHandlerFunc) Handle(params PostValidateOtpParams) middleware.Responder {
	return fn(params)
}

// PostValidateOtpHandler interface for that can handle valid post validate otp params
type PostValidateOtpHandler interface {
	Handle(PostValidateOtpParams) middleware.Responder
}

// NewPostValidateOtp creates a new http.Handler for the post validate otp operation
func NewPostValidateOtp(ctx *middleware.Context, handler PostValidateOtpHandler) *PostValidateOtp {
	return &PostValidateOtp{Context: ctx, Handler: handler}
}

/* PostValidateOtp swagger:route POST /validate-otp Auth postValidateOtp

Add a new pet to the store

Health check endpoint

*/
type PostValidateOtp struct {
	Context *middleware.Context
	Handler PostValidateOtpHandler
}

func (o *PostValidateOtp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostValidateOtpParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostValidateOtpBody post validate otp body
//
// swagger:model PostValidateOtpBody
type PostValidateOtpBody struct {

	// user otp
	// Example: 123456
	Otp string `json:"otp,omitempty"`

	// user phone_number
	// Example: 081334702936
	PhoneNumber string `json:"phone_number,omitempty"`
}

// Validate validates this post validate otp body
func (o *PostValidateOtpBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post validate otp body based on context it is used
func (o *PostValidateOtpBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostValidateOtpBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostValidateOtpBody) UnmarshalBinary(b []byte) error {
	var res PostValidateOtpBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostValidateOtpOKBody post validate otp o k body
//
// swagger:model PostValidateOtpOKBody
type PostValidateOtpOKBody struct {

	// data
	Data *PostValidateOtpOKBodyData `json:"data,omitempty"`

	// success retrieve data
	// Example: Success
	Message string `json:"message,omitempty"`
}

// Validate validates this post validate otp o k body
func (o *PostValidateOtpOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostValidateOtpOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postValidateOtpOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postValidateOtpOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post validate otp o k body based on the context it is used
func (o *PostValidateOtpOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostValidateOtpOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postValidateOtpOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postValidateOtpOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostValidateOtpOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostValidateOtpOKBody) UnmarshalBinary(b []byte) error {
	var res PostValidateOtpOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostValidateOtpOKBodyData post validate otp o k body data
//
// swagger:model PostValidateOtpOKBodyData
type PostValidateOtpOKBodyData struct {

	// user otp
	AccessToken string `json:"access_token,omitempty"`

	// user otp
	// Example: 081334702936
	User string `json:"user,omitempty"`
}

// Validate validates this post validate otp o k body data
func (o *PostValidateOtpOKBodyData) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post validate otp o k body data based on context it is used
func (o *PostValidateOtpOKBodyData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostValidateOtpOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostValidateOtpOKBodyData) UnmarshalBinary(b []byte) error {
	var res PostValidateOtpOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
