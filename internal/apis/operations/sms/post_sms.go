// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"hanoman-id/xendit-payment/internal/models"
)

// PostSmsHandlerFunc turns a function with the right signature into a post sms handler
type PostSmsHandlerFunc func(PostSmsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSmsHandlerFunc) Handle(params PostSmsParams) middleware.Responder {
	return fn(params)
}

// PostSmsHandler interface for that can handle valid post sms params
type PostSmsHandler interface {
	Handle(PostSmsParams) middleware.Responder
}

// NewPostSms creates a new http.Handler for the post sms operation
func NewPostSms(ctx *middleware.Context, handler PostSmsHandler) *PostSms {
	return &PostSms{Context: ctx, Handler: handler}
}

/* PostSms swagger:route POST /sms Sms postSms

Health check

Health check endpoint

*/
type PostSms struct {
	Context *middleware.Context
	Handler PostSmsHandler
}

func (o *PostSms) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostSmsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostSmsOKBody post sms o k body
//
// swagger:model PostSmsOKBody
type PostSmsOKBody struct {

	// response code
	ResponseCode string `json:"response_code,omitempty"`

	// response data
	ResponseData *models.SmsResponse `json:"response_data,omitempty"`

	// response messege
	ResponseMessege string `json:"response_messege,omitempty"`
}

// Validate validates this post sms o k body
func (o *PostSmsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponseData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSmsOKBody) validateResponseData(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseData) { // not required
		return nil
	}

	if o.ResponseData != nil {
		if err := o.ResponseData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSmsOK" + "." + "response_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSmsOK" + "." + "response_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post sms o k body based on the context it is used
func (o *PostSmsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponseData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSmsOKBody) contextValidateResponseData(ctx context.Context, formats strfmt.Registry) error {

	if o.ResponseData != nil {
		if err := o.ResponseData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postSmsOK" + "." + "response_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postSmsOK" + "." + "response_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSmsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSmsOKBody) UnmarshalBinary(b []byte) error {
	var res PostSmsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
