// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"hanoman-id/xendit-payment/internal/models"
)

// PostSmsOKCode is the HTTP code returned for type PostSmsOK
const PostSmsOKCode int = 200

/*PostSmsOK Success

swagger:response postSmsOK
*/
type PostSmsOK struct {

	/*
	  In: Body
	*/
	Payload *PostSmsOKBody `json:"body,omitempty"`
}

// NewPostSmsOK creates PostSmsOK with default headers values
func NewPostSmsOK() *PostSmsOK {

	return &PostSmsOK{}
}

// WithPayload adds the payload to the post sms o k response
func (o *PostSmsOK) WithPayload(payload *PostSmsOKBody) *PostSmsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sms o k response
func (o *PostSmsOK) SetPayload(payload *PostSmsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSmsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSmsBadRequestCode is the HTTP code returned for type PostSmsBadRequest
const PostSmsBadRequestCode int = 400

/*PostSmsBadRequest Unauthorized

swagger:response postSmsBadRequest
*/
type PostSmsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSmsBadRequest creates PostSmsBadRequest with default headers values
func NewPostSmsBadRequest() *PostSmsBadRequest {

	return &PostSmsBadRequest{}
}

// WithPayload adds the payload to the post sms bad request response
func (o *PostSmsBadRequest) WithPayload(payload *models.Error) *PostSmsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sms bad request response
func (o *PostSmsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSmsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSmsUnauthorizedCode is the HTTP code returned for type PostSmsUnauthorized
const PostSmsUnauthorizedCode int = 401

/*PostSmsUnauthorized Unauthorized

swagger:response postSmsUnauthorized
*/
type PostSmsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSmsUnauthorized creates PostSmsUnauthorized with default headers values
func NewPostSmsUnauthorized() *PostSmsUnauthorized {

	return &PostSmsUnauthorized{}
}

// WithPayload adds the payload to the post sms unauthorized response
func (o *PostSmsUnauthorized) WithPayload(payload *models.Error) *PostSmsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sms unauthorized response
func (o *PostSmsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSmsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSmsNotFoundCode is the HTTP code returned for type PostSmsNotFound
const PostSmsNotFoundCode int = 404

/*PostSmsNotFound The specified resource was not found

swagger:response postSmsNotFound
*/
type PostSmsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostSmsNotFound creates PostSmsNotFound with default headers values
func NewPostSmsNotFound() *PostSmsNotFound {

	return &PostSmsNotFound{}
}

// WithPayload adds the payload to the post sms not found response
func (o *PostSmsNotFound) WithPayload(payload *models.Error) *PostSmsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post sms not found response
func (o *PostSmsNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSmsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
