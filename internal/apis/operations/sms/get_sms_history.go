// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"hanoman-id/xendit-payment/internal/models"
)

// GetSmsHistoryHandlerFunc turns a function with the right signature into a get sms history handler
type GetSmsHistoryHandlerFunc func(GetSmsHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSmsHistoryHandlerFunc) Handle(params GetSmsHistoryParams) middleware.Responder {
	return fn(params)
}

// GetSmsHistoryHandler interface for that can handle valid get sms history params
type GetSmsHistoryHandler interface {
	Handle(GetSmsHistoryParams) middleware.Responder
}

// NewGetSmsHistory creates a new http.Handler for the get sms history operation
func NewGetSmsHistory(ctx *middleware.Context, handler GetSmsHistoryHandler) *GetSmsHistory {
	return &GetSmsHistory{Context: ctx, Handler: handler}
}

/* GetSmsHistory swagger:route GET /sms/history Sms getSmsHistory

Health check

Health check endpoint

*/
type GetSmsHistory struct {
	Context *middleware.Context
	Handler GetSmsHistoryHandler
}

func (o *GetSmsHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetSmsHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetSmsHistoryOKBody get sms history o k body
//
// swagger:model GetSmsHistoryOKBody
type GetSmsHistoryOKBody struct {

	// metadata
	Metadata *models.Metadata `json:"metadata,omitempty"`

	// response code
	ResponseCode string `json:"response_code,omitempty"`

	// response data
	ResponseData models.SmsHistory `json:"response_data"`

	// response messege
	ResponseMessege string `json:"response_messege,omitempty"`
}

// Validate validates this get sms history o k body
func (o *GetSmsHistoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResponseData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSmsHistoryOKBody) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSmsHistoryOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSmsHistoryOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetSmsHistoryOKBody) validateResponseData(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseData) { // not required
		return nil
	}

	if err := o.ResponseData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getSmsHistoryOK" + "." + "response_data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getSmsHistoryOK" + "." + "response_data")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get sms history o k body based on the context it is used
func (o *GetSmsHistoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResponseData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSmsHistoryOKBody) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if o.Metadata != nil {
		if err := o.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSmsHistoryOK" + "." + "metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getSmsHistoryOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetSmsHistoryOKBody) contextValidateResponseData(ctx context.Context, formats strfmt.Registry) error {

	if err := o.ResponseData.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getSmsHistoryOK" + "." + "response_data")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("getSmsHistoryOK" + "." + "response_data")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSmsHistoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSmsHistoryOKBody) UnmarshalBinary(b []byte) error {
	var res GetSmsHistoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
