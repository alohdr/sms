// Code generated by go-swagger; DO NOT EDIT.

package provider

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetProviderHandlerFunc turns a function with the right signature into a get provider handler
type GetProviderHandlerFunc func(GetProviderParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProviderHandlerFunc) Handle(params GetProviderParams) middleware.Responder {
	return fn(params)
}

// GetProviderHandler interface for that can handle valid get provider params
type GetProviderHandler interface {
	Handle(GetProviderParams) middleware.Responder
}

// NewGetProvider creates a new http.Handler for the get provider operation
func NewGetProvider(ctx *middleware.Context, handler GetProviderHandler) *GetProvider {
	return &GetProvider{Context: ctx, Handler: handler}
}

/* GetProvider swagger:route GET /provider Provider getProvider

Health check

Health check endpoint

*/
type GetProvider struct {
	Context *middleware.Context
	Handler GetProviderHandler
}

func (o *GetProvider) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetProviderParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetProviderOKBody get provider o k body
//
// swagger:model GetProviderOKBody
type GetProviderOKBody struct {

	// response code
	ResponseCode string `json:"response_code,omitempty"`

	// response data
	ResponseData []*GetProviderOKBodyResponseDataItems0 `json:"response_data"`

	// response messege
	ResponseMessege string `json:"response_messege,omitempty"`
}

// Validate validates this get provider o k body
func (o *GetProviderOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponseData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProviderOKBody) validateResponseData(formats strfmt.Registry) error {
	if swag.IsZero(o.ResponseData) { // not required
		return nil
	}

	for i := 0; i < len(o.ResponseData); i++ {
		if swag.IsZero(o.ResponseData[i]) { // not required
			continue
		}

		if o.ResponseData[i] != nil {
			if err := o.ResponseData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProviderOK" + "." + "response_data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getProviderOK" + "." + "response_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get provider o k body based on the context it is used
func (o *GetProviderOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponseData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetProviderOKBody) contextValidateResponseData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ResponseData); i++ {

		if o.ResponseData[i] != nil {
			if err := o.ResponseData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getProviderOK" + "." + "response_data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getProviderOK" + "." + "response_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetProviderOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProviderOKBody) UnmarshalBinary(b []byte) error {
	var res GetProviderOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetProviderOKBodyResponseDataItems0 get provider o k body response data items0
//
// swagger:model GetProviderOKBodyResponseDataItems0
type GetProviderOKBodyResponseDataItems0 struct {

	// success retrieve data
	// Example: app running well
	ID string `json:"id,omitempty"`

	// is actived
	// Example: app running well
	IsActived bool `json:"is_actived,omitempty"`

	// success retrieve data
	// Example: app running well
	Name string `json:"name,omitempty"`
}

// Validate validates this get provider o k body response data items0
func (o *GetProviderOKBodyResponseDataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get provider o k body response data items0 based on context it is used
func (o *GetProviderOKBodyResponseDataItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetProviderOKBodyResponseDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetProviderOKBodyResponseDataItems0) UnmarshalBinary(b []byte) error {
	var res GetProviderOKBodyResponseDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
