// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: sms.sql

package query

import (
	"context"
	"database/sql"
)

const creatSms = `-- name: CreatSms :execresult
INSERT INTO sms_history (
    id,
    sender,
    phone_number ,
    type,
    status
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreatSmsParams struct {
	ID          string `json:"id"`
	Sender      string `json:"sender"`
	PhoneNumber string `json:"phone_number"`
	Type        string `json:"type"`
	Status      string `json:"status"`
}

func (q *Queries) CreatSms(ctx context.Context, arg *CreatSmsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, creatSms,
		arg.ID,
		arg.Sender,
		arg.PhoneNumber,
		arg.Type,
		arg.Status,
	)
}

const getIsSelectedProvider = `-- name: GetIsSelectedProvider :one
SELECT
    id,
    name
FROM provider
WHERE is_deleted = false
and is_selected = false
LIMIT 1
`

type GetIsSelectedProviderRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetIsSelectedProvider(ctx context.Context) (*GetIsSelectedProviderRow, error) {
	row := q.db.QueryRowContext(ctx, getIsSelectedProvider)
	var i GetIsSelectedProviderRow
	err := row.Scan(&i.ID, &i.Name)
	return &i, err
}

const getSmsHistory = `-- name: GetSmsHistory :many
SELECT
    id,
    sender,
    phone_number ,
    type,
    status
FROM sms_history
WHERE is_deleted = false
LIMIT 10
`

type GetSmsHistoryRow struct {
	ID          string `json:"id"`
	Sender      string `json:"sender"`
	PhoneNumber string `json:"phone_number"`
	Type        string `json:"type"`
	Status      string `json:"status"`
}

func (q *Queries) GetSmsHistory(ctx context.Context) ([]*GetSmsHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getSmsHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetSmsHistoryRow
	for rows.Next() {
		var i GetSmsHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Sender,
			&i.PhoneNumber,
			&i.Type,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
