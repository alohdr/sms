// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: provider.sql

package query

import (
	"context"
)

const getProvider = `-- name: GetProvider :many
SELECT
    id,
    name,
    is_selected
FROM
    provider
WHERE
    is_deleted = false
`

type GetProviderRow struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	IsSelected bool   `json:"is_selected"`
}

func (q *Queries) GetProvider(ctx context.Context) ([]*GetProviderRow, error) {
	rows, err := q.db.QueryContext(ctx, getProvider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetProviderRow
	for rows.Next() {
		var i GetProviderRow
		if err := rows.Scan(&i.ID, &i.Name, &i.IsSelected); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFalseProvider = `-- name: UpdateFalseProvider :exec
UPDATE
    provider
SET
    is_selected = false
WHERE
    is_selected = true
and is_deleted = false
`

func (q *Queries) UpdateFalseProvider(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateFalseProvider)
	return err
}

const updateProvider = `-- name: UpdateProvider :exec
UPDATE
    provider
SET
    is_selected = true
WHERE
    id = ?
and is_deleted = false
`

func (q *Queries) UpdateProvider(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateProvider, id)
	return err
}
